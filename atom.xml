<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TouradondのBlog</title>
  
  
  <link href="https://blog.touradon.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.touradon.cn/"/>
  <updated>2021-03-15T08:56:21.087Z</updated>
  <id>https://blog.touradon.cn/</id>
  
  <author>
    <name>Touradon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rem适配布局</title>
    <link href="https://blog.touradon.cn/2021/03/15/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/"/>
    <id>https://blog.touradon.cn/2021/03/15/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/</id>
    <published>2021-03-15T08:54:40.000Z</published>
    <updated>2021-03-15T08:56:21.087Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="rem基础"><a href="#rem基础" class="headerlink" title="rem基础"></a>rem基础</h3><p>rem（root em）是相对单位，类似于em，em 是相对于父元素字体的大小；</p><p>不同的是 rem 的<strong>基准</strong>是相对于 <strong><html></html></strong> 元素的字体大小；</p><p>比如，根元素（html）设置 font-size: 12px，非根元素设置 width: 2rem，换算成 px 就是24px。</p><p><strong>rem优点：</strong></p><ul><li>通过改变根元素html的文字大小，来改变页面中元素的大小；</li><li>可以整体控制</li></ul><p>但是HTML一般是写死的，如果需要根据屏幕宽度动态改变html的字体大小，需要借助媒体查询@media来动态改变。</p><h3 id="媒体查询（Media-Query）"><a href="#媒体查询（Media-Query）" class="headerlink" title="媒体查询（Media Query）"></a>媒体查询（Media Query）</h3><ul><li>使用 @media 查询，可以针对不同的媒体类型定义不同的样式；</li><li>可以针对不同屏幕尺寸，设置不同的样式；</li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a><strong>语法</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> ( media feature ) &#123;</span><br><span class="line">    css <span class="selector-tag">code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用@media开头，定义媒体查询；</li><li>mediatype 表示媒体类型；</li><li>关键字 and  not  only；</li><li>media feature <strong>媒体特性</strong> 必须要有小括号包含；</li></ul><h4 id="mediatype"><a href="#mediatype" class="headerlink" title="**mediatype **"></a>**mediatype **</h4><p>将不同的终端设备划分成不同的类型，成为媒体类型</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>all</td><td>用于所有设备</td></tr><tr><td>print</td><td>用于打印机和打印预览</td></tr><tr><td>screen</td><td>用于电脑屏幕、平板电脑、智能手机等</td></tr></tbody></table><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>关键字将媒体类型或多个媒体特性连接到一起，作为媒体查询条件。</p><ul><li>and： 可以将多个媒体特性连接到一起，相当于“且”的意思；</li><li>not：排除某个媒体类型</li><li>only：制定某个特定的媒体类型</li></ul><h4 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h4><p>每种媒体类型都具有各自不同的特性，根据不同媒体类型的媒体查询，设置不同的展示风格。</p><p>暂且了解3个：</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>width</td><td>定义输出设备中，页面可见区域的宽度</td></tr><tr><td>min-widht</td><td>定义输出设备中，页面最小可见区域宽度</td></tr><tr><td>max-width</td><td>定义输出设备中，页面最大可见区域宽度</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">539px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> ( <span class="attribute">min-width</span>:<span class="number">540px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">969px</span> )&#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">969px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为简洁代码，从小到大的顺序书写。</p><h4 id="利用媒体查询动态改变rem"><a href="#利用媒体查询动态改变rem" class="headerlink" title="利用媒体查询动态改变rem"></a>利用媒体查询动态改变rem</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 动态改变html根元素的字体大小 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> ( <span class="attribute">min-width</span>:<span class="number">640px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">640px</span>; </span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">5rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="利用媒体查询引入资源"><a href="#利用媒体查询引入资源" class="headerlink" title="利用媒体查询引入资源"></a>利用媒体查询引入资源</h4><p>针对大屏幕写了一套CSS文件，针对小屏幕写了一套CSS文件；</p><p>原理：直接在link 中判断设备的尺寸，然后引入不同的 CSS 文件。</p><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 320引入的样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style320.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (min-width: 320px;)&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 640引入的样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style640.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen and (min-width: 640px;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h3 id=&quot;rem基础&quot;&gt;&lt;a href=&quot;#rem基础&quot; class=&quot;headerlink&quot; title=&quot;rem基础&quot;&gt;&lt;/a&gt;rem基础&lt;/h3&gt;&lt;p&gt;rem（root em）是相对单位，类似于em，em 是相对于父元素</summary>
      
    
    
    
    <category term="CSS3" scheme="https://blog.touradon.cn/categories/CSS3/"/>
    
    
    <category term="CSS3" scheme="https://blog.touradon.cn/tags/CSS3/"/>
    
    <category term="布局" scheme="https://blog.touradon.cn/tags/%E5%B8%83%E5%B1%80/"/>
    
    <category term="rem" scheme="https://blog.touradon.cn/tags/rem/"/>
    
    <category term="响应式" scheme="https://blog.touradon.cn/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Felx布局</title>
    <link href="https://blog.touradon.cn/2021/03/15/Felx%E5%B8%83%E5%B1%80/"/>
    <id>https://blog.touradon.cn/2021/03/15/Felx%E5%B8%83%E5%B1%80/</id>
    <published>2021-03-15T08:41:16.000Z</published>
    <updated>2021-03-15T08:56:15.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Flex-布局体验"><a href="#1、Flex-布局体验" class="headerlink" title="1、Flex 布局体验"></a>1、Flex 布局体验</h2><p>flex 对行内元素或者行内块元素的影响？</p><span id="more"></span><h2 id="2、Flex-布局原理"><a href="#2、Flex-布局原理" class="headerlink" title="2、Flex 布局原理"></a>2、Flex 布局原理</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p>flex 是 Flexible Box 的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性，<strong>任何一个容器</strong>都可以指定为 Flex 布局。</p><ul><li>当我们为父元素设置 flex 布局之后，子元素不需要设置浮动，能够设置水平和垂直布局，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性均失效；</li><li>伸缩布局=弹性布局=伸缩和布局=弹性盒布局=flex 布局</li></ul><h3 id="2-2-Flex-容器和-Flex-项目"><a href="#2-2-Flex-容器和-Flex-项目" class="headerlink" title="2.2 Flex 容器和 Flex 项目"></a>2.2 Flex 容器和 Flex 项目</h3><p>Flex 容器：采用 Flex 布局的元素，成为 Flex 容器（Flex Container），简称“容器”。</p><p>Flex 项目：Flex 容器的子元素自动成为容器成员，成为 Flex 项目（Flex Item），简称“项目”。可以横向排列，也可纵向排列。</p><p><img src="/.cn//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210206205116671.png" alt="image-20210206205116671"></p><h3 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a>2.3 总结</h3><p>Flex 布局通过给父元素添加<code>display:flex</code>属性，来控制子元素的位置和排列方式。</p><h2 id="3、Flex-容器（父元素）常见属性"><a href="#3、Flex-容器（父元素）常见属性" class="headerlink" title="3、Flex 容器（父元素）常见属性"></a>3、Flex 容器（父元素）常见属性</h2><h3 id="3-1-容器常见属性"><a href="#3-1-容器常见属性" class="headerlink" title="3.1 容器常见属性"></a>3.1 容器常见属性</h3><p>以下由 6 个属性是对父元素设置的：</p><p><code>flex-direction</code>：设置主轴的方向</p><p><code>jusify-content</code>: 设置主轴上的子元素排列方式</p><p><code>flex-wrap</code>: 设置子元素是否换行</p><p><code>align-content</code>：设置侧轴上子元素的排列方式（多行）</p><p><code>align-items</code>：设置侧轴上子元素的排列方式（单行）</p><p><code>flex-flow</code>：复合属性，相当于同时设置 flex-direction 和 flex-wrap</p><h3 id="3-2-flex-direction"><a href="#3-2-flex-direction" class="headerlink" title="3.2 flex-direction"></a>3.2 flex-direction</h3><p>flex-direction 用来设置主轴的方向，项目是跟随主轴排列的。</p><h4 id="3-2-1-主轴和侧轴"><a href="#3-2-1-主轴和侧轴" class="headerlink" title="3.2.1 主轴和侧轴"></a>3.2.1 主轴和侧轴</h4><p>在 flex 布局中，是分为主轴和侧轴两个方向，同样的叫法由：行和列、x 轴和 y 轴。</p><ul><li>默认主轴方向是 X 轴方向，水平向右；</li><li>默认侧轴方式是 Y 轴方向，水平向下；</li></ul><h4 id="3-2-2-属性值"><a href="#3-2-2-属性值" class="headerlink" title="3.2.2 属性值"></a>3.2.2 属性值</h4><p>在 Flex 布局中，主轴和侧轴是会变化的，主要看<code>flex-direction</code>设置谁为主轴，我们的子元素是跟随主轴进行排列的。</p><p>所以</p><p><code>flex-firection</code>属性决定主轴的方向（即项目排列的方向）。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>row</td><td>默认值，主轴水平方向，从左往右</td></tr><tr><td>row-reverse</td><td>主轴水平方向，从右往左，反向排列</td></tr><tr><td>column</td><td>主轴垂直方向，从上往下</td></tr><tr><td>column-reverse</td><td>主轴垂直方向，从下往上，反向排列</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: row; &#x2F;* 默认值，主轴为水平方向，可以不写 *&#x2F;</span><br><span class="line">flex-direction: column; &#x2F;* 主轴设置为垂直方向 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-justify-content"><a href="#3-3-justify-content" class="headerlink" title="3.3 justify-content"></a>3.3 justify-content</h3><p>定义项目在<strong>主轴</strong>上的<strong>对齐方式</strong></p><blockquote><p>注意：使用这个属性之前要确定好主轴方向。</p></blockquote><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值，从头部开始，如果主轴是 x 轴，则从左至右排列；如果主轴是 y 轴，则从上至下排列。</td></tr><tr><td>flex-end</td><td>从尾部排列</td></tr><tr><td>center</td><td>在主轴居中对齐</td></tr><tr><td>space-around</td><td>平分剩余空间</td></tr><tr><td>space-between</td><td>两端贴边对齐，在平分剩余空间（重要）</td></tr></tbody></table><h3 id="3-4-flex-wrap"><a href="#3-4-flex-wrap" class="headerlink" title="3.4 flex-wrap"></a>3.4 flex-wrap</h3><p>设置子元素是否换行排列。</p><p>默认情况下，项目都排列在一条线上。flex-wrap 属性定义，flex 布局中默认是不换行的。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>no-wrap</td><td>默认值，不换行</td></tr><tr><td>wrap</td><td>换行</td></tr></tbody></table><h3 id="3-5-align-items"><a href="#3-5-align-items" class="headerlink" title="3.5 align-items"></a>3.5 align-items</h3><p>设置项目在侧轴上的对齐方式（<strong>针对的是单行元素</strong>）</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值，延侧轴方向上起点方向开始排列</td></tr><tr><td>flex-end</td><td>延侧轴方向，从终点开始排列</td></tr><tr><td>center</td><td>垂直居中</td></tr><tr><td>stretch</td><td>拉伸（子元素不要设置高度）</td></tr></tbody></table><h3 id="3-6-align-content"><a href="#3-6-align-content" class="headerlink" title="3.6 align-content"></a>3.6 align-content</h3><p>设置项目在侧轴上的对齐方式<strong>（针对多行元素，单行下是没有效果的）</strong></p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>侧轴起点排列</td></tr><tr><td>flex-end</td><td>延侧轴重点排列</td></tr><tr><td>center</td><td>垂直居中</td></tr><tr><td>space-around</td><td>所有行在容器中平均分布，相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的距离是相邻两行间距的一半</td></tr><tr><td>space-between</td><td>所有行在容器中平均分布。相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的边对齐</td></tr><tr><td>stretch</td><td>拉伸</td></tr></tbody></table><h3 id="3-7-flex-flow"><a href="#3-7-flex-flow" class="headerlink" title="3.7 flex-flow"></a>3.7 flex-flow</h3><p><strong>flex-flow</strong>属性是 flex-direction 和 flex-wrap 的复合属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是常用的容器属性</p><h2 id="4、Flex-项目（子元素）常见属性"><a href="#4、Flex-项目（子元素）常见属性" class="headerlink" title="4、Flex 项目（子元素）常见属性"></a>4、Flex 项目（子元素）常见属性</h2><h3 id="4-1-常见属性"><a href="#4-1-常见属性" class="headerlink" title="4.1 常见属性"></a>4.1 常见属性</h3><ul><li>flex:定义子项目分配剩余空间，用 flex 来表示占多少份数</li><li>align-self</li><li>order</li></ul><h3 id="4-2-flex-属性"><a href="#4-2-flex-属性" class="headerlink" title="4.2 flex 属性"></a>4.2 flex 属性</h3><p>flex:定义子项目分配剩余空间，用 flex 来表示占多少份数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: &lt;numer&gt;; <span class="comment">/* 默认为0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较常见的应用场景：</p><p><img src="/.cn//Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210208225009574.png" alt="image-20210208225009574"></p><p>左侧的导航按钮和右侧的登录按钮是固定的，中间搜索框是不固定的，这个时候，设置搜索框占据的分数是 1，即它占据全部剩余空间。</p><p><strong>圣杯布局</strong></p><h3 id="4-3-align-self-属性"><a href="#4-3-align-self-属性" class="headerlink" title="4.3 align-self 属性"></a>4.3 align-self 属性</h3><p>单独设置某个子项目在侧轴上排列位置，可覆盖掉 align-items 属性。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>侧轴起点</td></tr><tr><td>flex-end</td><td>侧轴终点</td></tr><tr><td>center</td><td>在侧轴上居中</td></tr></tbody></table><h3 id="4-4-order"><a href="#4-4-order" class="headerlink" title="4.4 order"></a>4.4 order</h3><p>控制子项目的排列顺序</p><p>数值越小，排列越靠前，默认值为 0。</p><p>注意：和 z-index 不一样。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、Flex-布局体验&quot;&gt;&lt;a href=&quot;#1、Flex-布局体验&quot; class=&quot;headerlink&quot; title=&quot;1、Flex 布局体验&quot;&gt;&lt;/a&gt;1、Flex 布局体验&lt;/h2&gt;&lt;p&gt;flex 对行内元素或者行内块元素的影响？&lt;/p&gt;</summary>
    
    
    
    <category term="CSS3" scheme="https://blog.touradon.cn/categories/CSS3/"/>
    
    
    <category term="CSS3" scheme="https://blog.touradon.cn/tags/CSS3/"/>
    
    <category term="布局" scheme="https://blog.touradon.cn/tags/%E5%B8%83%E5%B1%80/"/>
    
    <category term="Flex" scheme="https://blog.touradon.cn/tags/Flex/"/>
    
    <category term="Layout" scheme="https://blog.touradon.cn/tags/Layout/"/>
    
  </entry>
  
</feed>
